{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { alertActions } from '_store';\nimport { history, fetchWrapper } from '_helpers';\n\n// create slice\n\nconst name = 'auth';\nconst initialState = createInitialState();\nconst reducers = createReducers();\nconst extraActions = createExtraActions();\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers\n});\n\n// exports\n\nexport const authActions = {\n  ...slice.actions,\n  ...extraActions\n};\nexport const authReducer = slice.reducer;\n\n// implementation\n\nfunction createInitialState() {\n  return {\n    // initialize state from local storage to enable user to stay logged in\n    value: JSON.parse(localStorage.getItem('auth'))\n  };\n}\nfunction createReducers() {\n  return {\n    setAuth\n  };\n  function setAuth(state, action) {\n    state.value = action.payload;\n  }\n}\nfunction createExtraActions() {\n  const baseUrl = `${process.env.REACT_APP_API_URL}/users`;\n  return {\n    login: login(),\n    logout: logout()\n  };\n  function login() {\n    return createAsyncThunk(`${name}/login`, async function (_ref, _ref2) {\n      let {\n        username,\n        password\n      } = _ref;\n      let {\n        dispatch\n      } = _ref2;\n      dispatch(alertActions.clear());\n      try {\n        const user = await fetchWrapper.post(`${baseUrl}/authenticate`, {\n          username,\n          password\n        });\n\n        // set auth user in redux state\n        dispatch(authActions.setAuth(user));\n\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('auth', JSON.stringify(user));\n\n        // get return url from location state or default to home page\n        const {\n          from\n        } = history.location.state || {\n          from: {\n            pathname: '/'\n          }\n        };\n        history.navigate(from);\n      } catch (error) {\n        dispatch(alertActions.error(error));\n      }\n    });\n  }\n  function logout() {\n    return createAsyncThunk(`${name}/logout`, function (arg, _ref3) {\n      let {\n        dispatch\n      } = _ref3;\n      dispatch(authActions.setAuth(null));\n      localStorage.removeItem('auth');\n      history.navigate('/account/login');\n    });\n  }\n}","map":{"version":3,"names":["createAsyncThunk","createSlice","alertActions","history","fetchWrapper","name","initialState","createInitialState","reducers","createReducers","extraActions","createExtraActions","slice","authActions","actions","authReducer","reducer","value","JSON","parse","localStorage","getItem","setAuth","state","action","payload","baseUrl","process","env","REACT_APP_API_URL","login","logout","_ref","_ref2","username","password","dispatch","clear","user","post","setItem","stringify","from","location","pathname","navigate","error","arg","_ref3","removeItem"],"sources":["F:/TestPro/simple-login-ui-react-redux/src/_store/auth.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { alertActions } from '_store';\r\nimport { history, fetchWrapper } from '_helpers';\r\n\r\n// create slice\r\n\r\nconst name = 'auth';\r\nconst initialState = createInitialState();\r\nconst reducers = createReducers();\r\nconst extraActions = createExtraActions();\r\nconst slice = createSlice({ name, initialState, reducers });\r\n\r\n// exports\r\n\r\nexport const authActions = { ...slice.actions, ...extraActions };\r\nexport const authReducer = slice.reducer;\r\n\r\n// implementation\r\n\r\nfunction createInitialState() {\r\n    return {\r\n        // initialize state from local storage to enable user to stay logged in\r\n        value: JSON.parse(localStorage.getItem('auth'))\r\n    }\r\n}\r\n\r\nfunction createReducers() {\r\n    return {\r\n        setAuth\r\n    };\r\n\r\n    function setAuth(state, action) {\r\n        state.value = action.payload;\r\n    }\r\n}\r\n\r\nfunction createExtraActions() {\r\n    const baseUrl = `${process.env.REACT_APP_API_URL}/users`;\r\n\r\n    return {\r\n        login: login(),\r\n        logout: logout()\r\n    };\r\n\r\n    function login() {\r\n        return createAsyncThunk(\r\n            `${name}/login`,\r\n            async function ({ username, password }, { dispatch }) {\r\n                dispatch(alertActions.clear());\r\n                try {\r\n                    const user = await fetchWrapper.post(`${baseUrl}/authenticate`, { username, password });\r\n\r\n                    // set auth user in redux state\r\n                    dispatch(authActions.setAuth(user));\r\n\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('auth', JSON.stringify(user));\r\n\r\n                    // get return url from location state or default to home page\r\n                    const { from } = history.location.state || { from: { pathname: '/' } };\r\n                    history.navigate(from);\r\n                } catch (error) {\r\n                    dispatch(alertActions.error(error));\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    function logout() {\r\n        return createAsyncThunk(\r\n            `${name}/logout`,\r\n            function (arg, { dispatch }) {\r\n                dispatch(authActions.setAuth(null));\r\n                localStorage.removeItem('auth');\r\n                history.navigate('/account/login');\r\n            }\r\n        );\r\n    }\r\n}"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,YAAY,QAAQ,QAAQ;AACrC,SAASC,OAAO,EAAEC,YAAY,QAAQ,UAAU;;AAEhD;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,YAAY,GAAGC,kBAAkB,EAAE;AACzC,MAAMC,QAAQ,GAAGC,cAAc,EAAE;AACjC,MAAMC,YAAY,GAAGC,kBAAkB,EAAE;AACzC,MAAMC,KAAK,GAAGX,WAAW,CAAC;EAAEI,IAAI;EAAEC,YAAY;EAAEE;AAAS,CAAC,CAAC;;AAE3D;;AAEA,OAAO,MAAMK,WAAW,GAAG;EAAE,GAAGD,KAAK,CAACE,OAAO;EAAE,GAAGJ;AAAa,CAAC;AAChE,OAAO,MAAMK,WAAW,GAAGH,KAAK,CAACI,OAAO;;AAExC;;AAEA,SAAST,kBAAkBA,CAAA,EAAG;EAC1B,OAAO;IACH;IACAU,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAClD,CAAC;AACL;AAEA,SAASZ,cAAcA,CAAA,EAAG;EACtB,OAAO;IACHa;EACJ,CAAC;EAED,SAASA,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC5BD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;EAChC;AACJ;AAEA,SAASd,kBAAkBA,CAAA,EAAG;EAC1B,MAAMe,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,QAAO;EAExD,OAAO;IACHC,KAAK,EAAEA,KAAK,EAAE;IACdC,MAAM,EAAEA,MAAM;EAClB,CAAC;EAED,SAASD,KAAKA,CAAA,EAAG;IACb,OAAO9B,gBAAgB,CAClB,GAAEK,IAAK,QAAO,EACf,gBAAA2B,IAAA,EAAAC,KAAA,EAAsD;MAAA,IAAtC;QAAEC,QAAQ;QAAEC;MAAS,CAAC,GAAAH,IAAA;MAAA,IAAE;QAAEI;MAAS,CAAC,GAAAH,KAAA;MAChDG,QAAQ,CAAClC,YAAY,CAACmC,KAAK,EAAE,CAAC;MAC9B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMlC,YAAY,CAACmC,IAAI,CAAE,GAAEb,OAAQ,eAAc,EAAE;UAAEQ,QAAQ;UAAEC;QAAS,CAAC,CAAC;;QAEvF;QACAC,QAAQ,CAACvB,WAAW,CAACS,OAAO,CAACgB,IAAI,CAAC,CAAC;;QAEnC;QACAlB,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEtB,IAAI,CAACuB,SAAS,CAACH,IAAI,CAAC,CAAC;;QAElD;QACA,MAAM;UAAEI;QAAK,CAAC,GAAGvC,OAAO,CAACwC,QAAQ,CAACpB,KAAK,IAAI;UAAEmB,IAAI,EAAE;YAAEE,QAAQ,EAAE;UAAI;QAAE,CAAC;QACtEzC,OAAO,CAAC0C,QAAQ,CAACH,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZV,QAAQ,CAAClC,YAAY,CAAC4C,KAAK,CAACA,KAAK,CAAC,CAAC;MACvC;IACJ,CAAC,CACJ;EACL;EAEA,SAASf,MAAMA,CAAA,EAAG;IACd,OAAO/B,gBAAgB,CAClB,GAAEK,IAAK,SAAQ,EAChB,UAAU0C,GAAG,EAAAC,KAAA,EAAgB;MAAA,IAAd;QAAEZ;MAAS,CAAC,GAAAY,KAAA;MACvBZ,QAAQ,CAACvB,WAAW,CAACS,OAAO,CAAC,IAAI,CAAC,CAAC;MACnCF,YAAY,CAAC6B,UAAU,CAAC,MAAM,CAAC;MAC/B9C,OAAO,CAAC0C,QAAQ,CAAC,gBAAgB,CAAC;IACtC,CAAC,CACJ;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}