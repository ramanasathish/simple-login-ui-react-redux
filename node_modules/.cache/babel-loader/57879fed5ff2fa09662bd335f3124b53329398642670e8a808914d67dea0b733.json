{"ast":null,"code":"export { fakeBackend };\n\n// array in local storage for registered users\nconst usersKey = 'react-18-redux-registration-login-example-users';\nlet users = JSON.parse(localStorage.getItem(usersKey)) || [];\nfunction fakeBackend() {\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users/authenticate') && opts.method === 'POST':\n            return authenticate();\n          case url.endsWith('/users/register') && opts.method === 'POST':\n            return register();\n          case url.endsWith('/users') && opts.method === 'GET':\n            return getUsers();\n          case url.match(/\\/users\\/\\d+$/) && opts.method === 'GET':\n            return getUserById();\n          case url.match(/\\/users\\/\\d+$/) && opts.method === 'PUT':\n            return updateUser();\n          case url.match(/\\/users\\/\\d+$/) && opts.method === 'DELETE':\n            return deleteUser();\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts).then(response => resolve(response)).catch(error => reject(error));\n        }\n      }\n\n      // route functions\n\n      function authenticate() {\n        const {\n          username,\n          password\n        } = body();\n        const user = users.find(x => x.username === username && x.password === password);\n        if (!user) return error('Username or password is incorrect');\n        return ok({\n          ...basicDetails(user),\n          token: 'fake-jwt-token'\n        });\n      }\n      function register() {\n        const user = body();\n        if (users.find(x => x.username === user.username)) {\n          return error('Username \"' + user.username + '\" is already taken');\n        }\n        user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n        users.push(user);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n      function getUsers() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(users.map(x => basicDetails(x)));\n      }\n      function getUserById() {\n        if (!isAuthenticated()) return unauthorized();\n        const user = users.find(x => x.id === idFromUrl());\n        return ok(basicDetails(user));\n      }\n      function updateUser() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body();\n        let user = users.find(x => x.id === idFromUrl());\n\n        // only update password if entered\n        if (!params.password) {\n          delete params.password;\n        }\n\n        // if username changed check if taken\n        if (params.username !== user.username && users.find(x => x.username === params.username)) {\n          return error('Username \"' + params.username + '\" is already taken');\n        }\n\n        // update and save user\n        Object.assign(user, params);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n      function deleteUser() {\n        if (!isAuthenticated()) return unauthorized();\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      // helper functions\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          ...headers(),\n          json: () => Promise.resolve(body)\n        });\n      }\n      function unauthorized() {\n        resolve({\n          status: 401,\n          ...headers(),\n          json: () => Promise.resolve({\n            message: 'Unauthorized'\n          })\n        });\n      }\n      function error(message) {\n        resolve({\n          status: 400,\n          ...headers(),\n          json: () => Promise.resolve({\n            message\n          })\n        });\n      }\n      function basicDetails(user) {\n        const {\n          id,\n          username,\n          firstName,\n          lastName\n        } = user;\n        return {\n          id,\n          username,\n          firstName,\n          lastName\n        };\n      }\n      function isAuthenticated() {\n        return opts.headers['Authorization'] === 'Bearer fake-jwt-token';\n      }\n      function body() {\n        return opts.body && JSON.parse(opts.body);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function headers() {\n        return {\n          headers: {\n            get(key) {\n              return ['application/json'];\n            }\n          }\n        };\n      }\n    });\n  };\n}","map":{"version":3,"names":["fakeBackend","usersKey","users","JSON","parse","localStorage","getItem","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","handleRoute","endsWith","method","authenticate","register","getUsers","match","getUserById","updateUser","deleteUser","then","response","catch","error","username","password","body","user","find","x","ok","basicDetails","token","id","length","Math","max","map","push","setItem","stringify","isAuthenticated","unauthorized","idFromUrl","params","Object","assign","filter","headers","json","status","message","firstName","lastName","urlParts","split","parseInt","get","key"],"sources":["F:/TestPro/simple-login-ui-react-redux/src/_helpers/fake-backend.js"],"sourcesContent":["export { fakeBackend };\r\n\r\n// array in local storage for registered users\r\nconst usersKey = 'react-18-redux-registration-login-example-users';\r\nlet users = JSON.parse(localStorage.getItem(usersKey)) || [];\r\n\r\nfunction fakeBackend() {\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(handleRoute, 500);\r\n\r\n            function handleRoute() {\r\n                switch (true) {\r\n                    case url.endsWith('/users/authenticate') && opts.method === 'POST':\r\n                        return authenticate();\r\n                    case url.endsWith('/users/register') && opts.method === 'POST':\r\n                        return register();\r\n                    case url.endsWith('/users') && opts.method === 'GET':\r\n                        return getUsers();\r\n                    case url.match(/\\/users\\/\\d+$/) && opts.method === 'GET':\r\n                        return getUserById();\r\n                    case url.match(/\\/users\\/\\d+$/) && opts.method === 'PUT':\r\n                        return updateUser();\r\n                    case url.match(/\\/users\\/\\d+$/) && opts.method === 'DELETE':\r\n                        return deleteUser();\r\n                    default:\r\n                        // pass through any requests not handled above\r\n                        return realFetch(url, opts)\r\n                            .then(response => resolve(response))\r\n                            .catch(error => reject(error));\r\n                }\r\n            }\r\n\r\n            // route functions\r\n\r\n            function authenticate() {\r\n                const { username, password } = body();\r\n                const user = users.find(x => x.username === username && x.password === password);\r\n\r\n                if (!user) return error('Username or password is incorrect');\r\n\r\n                return ok({\r\n                    ...basicDetails(user),\r\n                    token: 'fake-jwt-token'\r\n                });\r\n            }\r\n\r\n            function register() {\r\n                const user = body();\r\n\r\n                if (users.find(x => x.username === user.username)) {\r\n                    return error('Username \"' + user.username + '\" is already taken')\r\n                }\r\n\r\n                user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\r\n                users.push(user);\r\n                localStorage.setItem(usersKey, JSON.stringify(users));\r\n                return ok();\r\n            }\r\n\r\n            function getUsers() {\r\n                if (!isAuthenticated()) return unauthorized();\r\n                return ok(users.map(x => basicDetails(x)));\r\n            }\r\n\r\n            function getUserById() {\r\n                if (!isAuthenticated()) return unauthorized();\r\n\r\n                const user = users.find(x => x.id === idFromUrl());\r\n                return ok(basicDetails(user));\r\n            }\r\n\r\n            function updateUser() {\r\n                if (!isAuthenticated()) return unauthorized();\r\n\r\n                let params = body();\r\n                let user = users.find(x => x.id === idFromUrl());\r\n\r\n                // only update password if entered\r\n                if (!params.password) {\r\n                    delete params.password;\r\n                }\r\n\r\n                // if username changed check if taken\r\n                if (params.username !== user.username && users.find(x => x.username === params.username)) {\r\n                    return error('Username \"' + params.username + '\" is already taken')\r\n                }\r\n\r\n                // update and save user\r\n                Object.assign(user, params);\r\n                localStorage.setItem(usersKey, JSON.stringify(users));\r\n\r\n                return ok();\r\n            }\r\n\r\n            function deleteUser() {\r\n                if (!isAuthenticated()) return unauthorized();\r\n\r\n                users = users.filter(x => x.id !== idFromUrl());\r\n                localStorage.setItem(usersKey, JSON.stringify(users));\r\n                return ok();\r\n            }\r\n\r\n            // helper functions\r\n\r\n            function ok(body) {\r\n                resolve({ ok: true, ...headers(), json: () => Promise.resolve(body) })\r\n            }\r\n\r\n            function unauthorized() {\r\n                resolve({ status: 401, ...headers(), json: () => Promise.resolve({ message: 'Unauthorized' }) })\r\n            }\r\n\r\n            function error(message) {\r\n                resolve({ status: 400, ...headers(), json: () => Promise.resolve({ message }) })\r\n            }\r\n\r\n            function basicDetails(user) {\r\n                const { id, username, firstName, lastName } = user;\r\n                return { id, username, firstName, lastName };\r\n            }\r\n\r\n            function isAuthenticated() {\r\n                return opts.headers['Authorization'] === 'Bearer fake-jwt-token';\r\n            }\r\n\r\n            function body() {\r\n                return opts.body && JSON.parse(opts.body);\r\n            }\r\n\r\n            function idFromUrl() {\r\n                const urlParts = url.split('/');\r\n                return parseInt(urlParts[urlParts.length - 1]);\r\n            }\r\n\r\n            function headers() {\r\n                return {\r\n                    headers: {\r\n                        get(key) {\r\n                            return ['application/json'];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}